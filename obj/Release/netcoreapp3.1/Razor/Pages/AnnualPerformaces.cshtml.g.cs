#pragma checksum "C:\Users\Admin\Google Drive\pjs renovation ltd\PJSrenovationsSolution\PJSrenovationWeb\Pages\AnnualPerformaces.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "891214ce26f2c5b1102f5a7d4bc5ba15d69a2fab"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(PJSrenovationWeb.Pages.Pages_AnnualPerformaces), @"mvc.1.0.razor-page", @"/Pages/AnnualPerformaces.cshtml")]
namespace PJSrenovationWeb.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\Admin\Google Drive\pjs renovation ltd\PJSrenovationsSolution\PJSrenovationWeb\Pages\_ViewImports.cshtml"
using PJSrenovationWeb;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"891214ce26f2c5b1102f5a7d4bc5ba15d69a2fab", @"/Pages/AnnualPerformaces.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"361560c68f240a126124f6e8f876cbf9d14f1ff5", @"/Pages/_ViewImports.cshtml")]
    public class Pages_AnnualPerformaces : global::Microsoft.AspNetCore.Mvc.RazorPages.Page
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral(@"<section id=""annual-performance"">
    <div class=""row"">
        <div class=""col-sm-12 text-center"">
            <p><u class=""display-4""> Trends and Performances</u></p>
        </div>
    </div>
   
    <div class=""row "">
        <div class=""col-sm-6  card"" id=""finish-trends"">
");
            WriteLiteral("        </div>\r\n        <div id=\"colour-trends\" class=\"col-sm-6  card\">\r\n");
            WriteLiteral(@"        </div>
    </div>
    <div class=""row mt-2 mb-2 card "">
        

            <table id=""project-labour-hours"" class=""col-sm-12 table-bordered table-striped "">

                <thead>
                    <tr>
                        <th class=""mr-1 p-1"">Address</th>
                        <th class=""mr-1 p-1"">House Size </th>
                        <th class=""mr-1 p-1"">Expected hours</th>
                        <th class=""mr-1 p-1"">Actual hours</th>
                    </tr>
                </thead>
                <tbody id=""databody"">
                </tbody>
            </table>
");
            WriteLiteral("    </div>");
            WriteLiteral("    <div id=\"yearly\" class=\"row\">\r\n        <div id=\"project\" class=\"col-sm-12 col-md-12 col-lg-12 col-xl-12 col-12 card \" style=\"height: 400px\">\r\n\r\n        </div>\r\n    </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n</section>\r\n\r\n\r\n\r\n");
            DefineSection("Dashboard_Scripts", async() => {
                WriteLiteral("\r\n\r\n");
                WriteLiteral(@"    <script type=""text/javascript"" src=""https://www.gstatic.com/charts/loader.js""></script>
    <script type=""text/javascript"">
        google.charts.load('current', { packages: ['corechart'] });
    </script>
    <script type=""text/javascript"" src=""//ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js""></script>


");
                WriteLiteral(@"    <script language=""JavaScript"">
        function drawChart() {
            var jsonData = $.ajax({
                url: ""/api/AnnualPerformance/WallFinishTrends"",
                dataType: ""json"",
                async: false
            }).responseText;
            var serverData = JSON.parse(jsonData);
            console.log( serverData);
            var arrayRows = [];
            for (let finishTrend of serverData) {
                arrayRows.push([finishTrend.Finish, finishTrend.Count]);
                
            }
            console.log(arrayRows);
            // Define the chart to be drawn.
            var data = new google.visualization.DataTable();
            data.addColumn('string', 'Wall Colours');
            data.addColumn('number', 'Percentage');
            for (var i = 0; i < arrayRows.length; i++) {
                data.addRows([arrayRows[i]]);
            }
            //data.addRows([
            //    ['Firefox', 45.0],
            //    ['IE', 26.8],
   ");
                WriteLiteral(@"         //    ['Chrome', 12.8],
            //    ['Safari', 8.5],
            //    ['Opera', 6.2],
            //    ['Others', 0.7]
            //]);

            // Set chart options
            var options = {
                'title': 'Ten Years Wall Finish Trends',
                'width': 550,
                'height': 400
            };

            // Instantiate and draw the chart.
            var chart = new google.visualization.PieChart(document.getElementById('finish-trends'));
            chart.draw(data, options);
        }
        google.charts.setOnLoadCallback(drawChart);
    </script>
");
                WriteLiteral(@"
    <script type=""text/javascript"">

        window.onload = () => {
            var xmlr = new XMLHttpRequest();

            xmlr.onreadystatechange = function () {
                if (this.readyState == 4 && this.status == 200) {
                    console.log(this.responseText);
                    var responseJson = JSON.parse(this.responseText);

                    colourTrendTable(responseJson);
                    console.log(responseJson);
                }
            }
            xmlr.open(""GET"", ""/api/AnnualPerformance/ProjectAnalysis"", true)
            xmlr.send();

        };
        //=====================Table population function=================
        function colourTrendTable(data) {
            const tbody = document.getElementById('databody');
            let rows = ' ';
            for (let labourHours of data) {
                rows +=
                    `<tr>
                                                                     <td class = ""p-1"">${labour");
                WriteLiteral(@"Hours.Address}</td>
                                                                    <td class = ""p-1"">${labourHours.Size}</td>
                                                                     <td class = ""p-1"">${labourHours.ExpectedHours}</td>
                                                                     <td class = ""p-1"">${labourHours.ActualHours}</td>
                                                                    </tr >`;
            }
            tbody.innerHTML = rows;
        }

    </script>





");
                WriteLiteral("\r\n");
                WriteLiteral(@"    <script language=""JavaScript"">
        function drawChart() {
            var jsonData = $.ajax({
                url: ""/api/AnnualPerformance/ColourTrend"",
                dataType: ""json"",
                async: false
            }).responseText;
            var jObj = JSON.parse(jsonData);
            var arrayRows = [];
            var arrayColors = [];
            for (let colourObj of jObj) {
                arrayRows.push([colourObj.ColourName, colourObj.Count]);
                arrayColors.push(colourObj.ColourValue)
            }
            // Define the chart to be drawn.
            console.log(arrayColors);
            var data = new google.visualization.DataTable();
            data.addColumn('string', 'Wall Colours');
            data.addColumn('number', 'Percentage');
            for (var i = 0; i < arrayRows.length; i++) {
                data.addRows([arrayRows[i]]);
            }
            //data.addRows([
            //    ['Firefox', 45.0],
            //    ");
                WriteLiteral(@"['IE', 26.8],
            //    ['Chrome', 12.8],
            //    ['Safari', 8.5],
            //    ['Opera', 6.2],
            //    ['Others', 0.7]
            //]);

            // Set chart options
            var options = {
                'title': 'Ten Years Wall Colour Trends',
                'width': 550,
                'height': 400,
                'colors': arrayColors
            };

            // Instantiate and draw the chart.
            var chart = new google.visualization.PieChart(document.getElementById('colour-trends'));
            chart.draw(data, options);
        }
        google.charts.setOnLoadCallback(drawChart);
    </script>


");
                WriteLiteral(@"    <script type=""text/javascript"">
        google.charts.load('current', { 'packages': ['bar'] });
        google.charts.setOnLoadCallback(drawChart);
        // global  data
        var painterData;


        $(document).ready(function () {
            $.ajax({
                url: '/api/AnnualPerformance/PaintingAnnualPerformance',
                data: '',
                dataType: 'json',
                type: 'GET',
                contentType: 'application/json; chartset=utf-8',
                success: function (data) {
                    painterData = data;
                },
                error: function () {
                    alert(""Error loading annual painting  data from server! Please try again"");
                },


            }).done(function () {

                console.log(painterData);
            });


        });


        function drawChart() {
            var data = google.visualization.arrayToDataTable(painterData);

            var options = {");
                WriteLiteral(@"
                chart: {
                    title: 'Painting Performance',
                    subtitle: 'Work Targets and Performance ',
                    height: 350,
                },
                'chartArea': { 'width': '82%', height: '60%', top: '9%', left: '15%', right: '3%', bottom: '0' } /* Adjust chart alignment to fit vertical labels for horizontal axis*/
            };

            var chart = new google.charts.Bar(document.getElementById('project'));

            chart.draw(data, google.charts.Bar.convertOptions(options));
        }
    </script>


");
                WriteLiteral("\r\n");
                WriteLiteral("\r\n");
            }
            );
            WriteLiteral(" ");
            WriteLiteral("\r\n");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<PJSrenovationWeb.Pages.AnnualPerformacesModel> Html { get; private set; }
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<PJSrenovationWeb.Pages.AnnualPerformacesModel> ViewData => (global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<PJSrenovationWeb.Pages.AnnualPerformacesModel>)PageContext?.ViewData;
        public PJSrenovationWeb.Pages.AnnualPerformacesModel Model => ViewData.Model;
    }
}
#pragma warning restore 1591
